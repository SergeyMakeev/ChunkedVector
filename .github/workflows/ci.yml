name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  build-and-test:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    
    strategy:
      fail-fast: false
      matrix:
        config:
          # Linux builds
          - {
              name: "Linux GCC 11",
              os: ubuntu-22.04,
              cc: "gcc-11",
              cxx: "g++-11",
              build_type: "Release"
            }
          - {
              name: "Linux GCC 11 Debug",
              os: ubuntu-22.04,
              cc: "gcc-11", 
              cxx: "g++-11",
              build_type: "Debug"
            }
          - {
              name: "Linux Clang 14",
              os: ubuntu-22.04,
              cc: "clang-14",
              cxx: "clang++-14",
              build_type: "Release"
            }
          - {
              name: "Linux Clang 14 Debug",
              os: ubuntu-22.04,
              cc: "clang-14",
              cxx: "clang++-14", 
              build_type: "Debug"
            }
          
          # macOS builds
          - {
              name: "macOS Clang",
              os: macos-13,
              cc: "clang",
              cxx: "clang++",
              build_type: "Release"
            }
          - {
              name: "macOS Clang Debug", 
              os: macos-13,
              cc: "clang",
              cxx: "clang++",
              build_type: "Debug"
            }
          - {
              name: "macOS Latest",
              os: macos-latest,
              cc: "clang",
              cxx: "clang++",
              build_type: "Release"
            }
          
          # Windows builds
          - {
              name: "Windows MSVC 2022",
              os: windows-2022,
              cc: "cl",
              cxx: "cl",
              build_type: "Release",
              generator: "Visual Studio 17 2022"
            }
          - {
              name: "Windows MSVC 2022 Debug",
              os: windows-2022,
              cc: "cl", 
              cxx: "cl",
              build_type: "Debug",
              generator: "Visual Studio 17 2022"
            }
          - {
              name: "Windows MSVC 2019",
              os: windows-2019,
              cc: "cl",
              cxx: "cl", 
              build_type: "Release",
              generator: "Visual Studio 16 2019"
            }

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Linux Dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build

      - name: Setup macOS Dependencies  
        if: runner.os == 'macOS'
        run: |
          brew install ninja

      - name: Setup Windows Dependencies
        if: runner.os == 'Windows'
        run: |
          choco install ninja

      - name: Setup MSBuild (Windows)
        if: runner.os == 'Windows'
        uses: microsoft/setup-msbuild@v2

      - name: Setup CMake
        uses: jwlawson/actions-setup-cmake@v1.14
        with:
          cmake-version: '3.25'

      - name: Set Environment Variables (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          echo "CC=${{ matrix.config.cc }}" >> $GITHUB_ENV
          echo "CXX=${{ matrix.config.cxx }}" >> $GITHUB_ENV

      - name: Configure CMake (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          cmake -B build \
            -DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }} \
            -G Ninja

      - name: Configure CMake (Windows)
        if: runner.os == 'Windows' 
        run: |
          cmake -B build -G "${{ matrix.config.generator }}" -A x64

      - name: Build (Linux/macOS)
        if: runner.os != 'Windows'
        run: cmake --build build --config ${{ matrix.config.build_type }} --parallel

      - name: Build (Windows)
        if: runner.os == 'Windows'
        run: cmake --build build --config ${{ matrix.config.build_type }} --parallel

      - name: Test (Linux/macOS)
        if: runner.os != 'Windows'
        working-directory: build
        run: ctest --output-on-failure --parallel -C ${{ matrix.config.build_type }}

      - name: Test (Windows)
        if: runner.os == 'Windows'
        working-directory: build
        run: ctest --output-on-failure --parallel -C ${{ matrix.config.build_type }}

      - name: Run Tests Directly (Linux/macOS)
        if: runner.os != 'Windows'
        working-directory: build
        run: ./chunked_vector_tests --gtest_output=xml:test_results.xml

      - name: Run Tests Directly (Windows)
        if: runner.os == 'Windows'
        working-directory: build
        run: .\${{ matrix.config.build_type }}\chunked_vector_tests.exe --gtest_output=xml:test_results.xml

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.config.name }}
          path: build/test_results.xml

  coverage:
    name: Code Coverage
    runs-on: ubuntu-22.04
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build gcov lcov

      - name: Setup CMake
        uses: jwlawson/actions-setup-cmake@v1.14
        with:
          cmake-version: '3.25'

      - name: Configure CMake with Coverage
        run: |
          cmake -B build \
            -DCMAKE_BUILD_TYPE=Debug \
            -DCMAKE_CXX_FLAGS="--coverage -fprofile-arcs -ftest-coverage" \
            -DCMAKE_C_FLAGS="--coverage -fprofile-arcs -ftest-coverage" \
            -DCMAKE_EXE_LINKER_FLAGS="--coverage" \
            -G Ninja
        env:
          CC: gcc-11
          CXX: g++-11

      - name: Build
        run: cmake --build build --parallel

      - name: Run Tests
        working-directory: build
        run: ./chunked_vector_tests

      - name: Generate Coverage Report
        run: |
          lcov --directory build --capture --output-file coverage.info
          lcov --remove coverage.info '/usr/*' --output-file coverage.info
          lcov --remove coverage.info '*/googletest/*' --output-file coverage.info
          lcov --remove coverage.info '*/test/*' --output-file coverage.info
          lcov --remove coverage.info '*_test.cpp' --output-file coverage.info
          lcov --list coverage.info

      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  sanitizers:
    name: ${{ matrix.sanitizer }} Sanitizer
    runs-on: ubuntu-22.04
    
    strategy:
      matrix:
        sanitizer: [address, undefined, thread]
        
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build

      - name: Setup CMake
        uses: jwlawson/actions-setup-cmake@v1.14
        with:
          cmake-version: '3.25'

      - name: Configure CMake with ${{ matrix.sanitizer }} Sanitizer
        run: |
          cmake -B build \
            -DCMAKE_BUILD_TYPE=Debug \
            -DCMAKE_CXX_FLAGS="-fsanitize=${{ matrix.sanitizer }} -fno-omit-frame-pointer" \
            -DCMAKE_EXE_LINKER_FLAGS="-fsanitize=${{ matrix.sanitizer }}" \
            -G Ninja
        env:
          CC: clang-14
          CXX: clang++-14

      - name: Build
        run: cmake --build build --parallel

      - name: Run Tests with ${{ matrix.sanitizer }} Sanitizer
        working-directory: build
        run: ./chunked_vector_tests
        env:
          ASAN_OPTIONS: detect_leaks=1:abort_on_error=1
          UBSAN_OPTIONS: abort_on_error=1
          TSAN_OPTIONS: abort_on_error=1 